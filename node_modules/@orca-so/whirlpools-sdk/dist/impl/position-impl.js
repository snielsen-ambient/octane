"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PositionImpl = void 0;
const common_sdk_1 = require("@orca-so/common-sdk");
const instructions_1 = require("../instructions");
const public_1 = require("../utils/public");
class PositionImpl {
    constructor(ctx, fetcher, address, data) {
        this.ctx = ctx;
        this.fetcher = fetcher;
        this.address = address;
        this.data = data;
    }
    getAddress() {
        return this.address;
    }
    getData() {
        return this.data;
    }
    refreshData() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.refresh();
            return this.data;
        });
    }
    increaseLiquidity(liquidityInput, resolveATA = true, sourceWallet, positionWallet, ataPayer) {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceWalletKey = sourceWallet
                ? common_sdk_1.AddressUtil.toPubKey(sourceWallet)
                : this.ctx.wallet.publicKey;
            const positionWalletKey = positionWallet
                ? common_sdk_1.AddressUtil.toPubKey(positionWallet)
                : this.ctx.wallet.publicKey;
            const ataPayerKey = ataPayer ? common_sdk_1.AddressUtil.toPubKey(ataPayer) : this.ctx.wallet.publicKey;
            const whirlpool = yield this.fetcher.getPool(this.data.whirlpool, true);
            if (!whirlpool) {
                throw new Error("Unable to fetch whirlpool for this position.");
            }
            const txBuilder = new common_sdk_1.TransactionBuilder(this.ctx.provider.connection, this.ctx.provider.wallet);
            let tokenOwnerAccountA;
            let tokenOwnerAccountB;
            if (resolveATA) {
                const [ataA, ataB] = yield (0, common_sdk_1.resolveOrCreateATAs)(this.ctx.connection, sourceWalletKey, [
                    { tokenMint: whirlpool.tokenMintA, wrappedSolAmountIn: liquidityInput.tokenMaxA },
                    { tokenMint: whirlpool.tokenMintB, wrappedSolAmountIn: liquidityInput.tokenMaxB },
                ], () => this.fetcher.getAccountRentExempt(), ataPayerKey);
                const _a = ataA, { address: ataAddrA } = _a, tokenOwnerAccountAIx = __rest(_a, ["address"]);
                const _b = ataB, { address: ataAddrB } = _b, tokenOwnerAccountBIx = __rest(_b, ["address"]);
                tokenOwnerAccountA = ataAddrA;
                tokenOwnerAccountB = ataAddrB;
                txBuilder.addInstruction(tokenOwnerAccountAIx);
                txBuilder.addInstruction(tokenOwnerAccountBIx);
            }
            else {
                tokenOwnerAccountA = yield (0, common_sdk_1.deriveATA)(sourceWalletKey, whirlpool.tokenMintA);
                tokenOwnerAccountB = yield (0, common_sdk_1.deriveATA)(sourceWalletKey, whirlpool.tokenMintB);
            }
            const positionTokenAccount = yield (0, common_sdk_1.deriveATA)(positionWalletKey, this.data.positionMint);
            const increaseIx = (0, instructions_1.increaseLiquidityIx)(this.ctx.program, Object.assign(Object.assign({}, liquidityInput), { whirlpool: this.data.whirlpool, position: this.address, positionTokenAccount,
                tokenOwnerAccountA,
                tokenOwnerAccountB, tokenVaultA: whirlpool.tokenVaultA, tokenVaultB: whirlpool.tokenVaultB, tickArrayLower: public_1.PDAUtil.getTickArray(this.ctx.program.programId, this.data.whirlpool, public_1.TickUtil.getStartTickIndex(this.data.tickLowerIndex, whirlpool.tickSpacing)).publicKey, tickArrayUpper: public_1.PDAUtil.getTickArray(this.ctx.program.programId, this.data.whirlpool, public_1.TickUtil.getStartTickIndex(this.data.tickUpperIndex, whirlpool.tickSpacing)).publicKey, positionAuthority: positionWalletKey }));
            txBuilder.addInstruction(increaseIx);
            return txBuilder;
        });
    }
    decreaseLiquidity(liquidityInput, resolveATA = true, sourceWallet, positionWallet, ataPayer) {
        return __awaiter(this, void 0, void 0, function* () {
            const sourceWalletKey = sourceWallet
                ? common_sdk_1.AddressUtil.toPubKey(sourceWallet)
                : this.ctx.wallet.publicKey;
            const positionWalletKey = positionWallet
                ? common_sdk_1.AddressUtil.toPubKey(positionWallet)
                : this.ctx.wallet.publicKey;
            const ataPayerKey = ataPayer ? common_sdk_1.AddressUtil.toPubKey(ataPayer) : this.ctx.wallet.publicKey;
            const whirlpool = yield this.fetcher.getPool(this.data.whirlpool, true);
            if (!whirlpool) {
                throw new Error("Unable to fetch whirlpool for this position.");
            }
            const txBuilder = new common_sdk_1.TransactionBuilder(this.ctx.provider.connection, this.ctx.provider.wallet);
            let tokenOwnerAccountA;
            let tokenOwnerAccountB;
            if (resolveATA) {
                const [ataA, ataB] = yield (0, common_sdk_1.resolveOrCreateATAs)(this.ctx.connection, sourceWalletKey, [{ tokenMint: whirlpool.tokenMintA }, { tokenMint: whirlpool.tokenMintB }], () => this.fetcher.getAccountRentExempt(), ataPayerKey);
                const _a = ataA, { address: ataAddrA } = _a, tokenOwnerAccountAIx = __rest(_a, ["address"]);
                const _b = ataB, { address: ataAddrB } = _b, tokenOwnerAccountBIx = __rest(_b, ["address"]);
                tokenOwnerAccountA = ataAddrA;
                tokenOwnerAccountB = ataAddrB;
                txBuilder.addInstruction(tokenOwnerAccountAIx);
                txBuilder.addInstruction(tokenOwnerAccountBIx);
            }
            else {
                tokenOwnerAccountA = yield (0, common_sdk_1.deriveATA)(sourceWalletKey, whirlpool.tokenMintA);
                tokenOwnerAccountB = yield (0, common_sdk_1.deriveATA)(sourceWalletKey, whirlpool.tokenMintB);
            }
            const decreaseIx = (0, instructions_1.decreaseLiquidityIx)(this.ctx.program, Object.assign(Object.assign({}, liquidityInput), { whirlpool: this.data.whirlpool, position: this.address, positionTokenAccount: yield (0, common_sdk_1.deriveATA)(positionWalletKey, this.data.positionMint), tokenOwnerAccountA,
                tokenOwnerAccountB, tokenVaultA: whirlpool.tokenVaultA, tokenVaultB: whirlpool.tokenVaultB, tickArrayLower: public_1.PDAUtil.getTickArray(this.ctx.program.programId, this.data.whirlpool, public_1.TickUtil.getStartTickIndex(this.data.tickLowerIndex, whirlpool.tickSpacing)).publicKey, tickArrayUpper: public_1.PDAUtil.getTickArray(this.ctx.program.programId, this.data.whirlpool, public_1.TickUtil.getStartTickIndex(this.data.tickUpperIndex, whirlpool.tickSpacing)).publicKey, positionAuthority: positionWalletKey }));
            txBuilder.addInstruction(decreaseIx);
            return txBuilder;
        });
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.fetcher.getPosition(this.address, true);
            if (!!account) {
                this.data = account;
            }
        });
    }
}
exports.PositionImpl = PositionImpl;
