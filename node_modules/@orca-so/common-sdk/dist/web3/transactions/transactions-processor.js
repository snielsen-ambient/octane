"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionProcessor = void 0;
// Only used internally
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus[TransactionStatus["CONFIRMED"] = 0] = "CONFIRMED";
    TransactionStatus[TransactionStatus["EXPIRED"] = 1] = "EXPIRED";
})(TransactionStatus || (TransactionStatus = {}));
class TransactionProcessor {
    constructor(connection, wallet, commitment = "confirmed") {
        this.connection = connection;
        this.wallet = wallet;
        this.commitment = commitment;
    }
    signTransaction(txRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const { transactions, lastValidBlockHeight } = yield this.signTransactions([txRequest]);
            return { transaction: transactions[0], lastValidBlockHeight };
        });
    }
    signTransactions(txRequests) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: Neither Solana nor Anchor currently correctly handle latest block height confirmation
            const { blockhash, lastValidBlockHeight } = yield this.connection.getLatestBlockhash(this.commitment);
            const feePayer = this.wallet.publicKey;
            const pSignedTxs = txRequests.map((txRequest) => {
                return rewriteTransaction(txRequest, feePayer, blockhash);
            });
            const transactions = yield this.wallet.signAllTransactions(pSignedTxs);
            return {
                transactions,
                lastValidBlockHeight,
            };
        });
    }
    sendTransaction(transaction, lastValidBlockHeight) {
        return __awaiter(this, void 0, void 0, function* () {
            const execute = this.constructSendTransactions([transaction], lastValidBlockHeight);
            const txs = yield execute();
            const ex = txs[0];
            if (ex.status === "fulfilled") {
                return ex.value;
            }
            else {
                throw ex.reason;
            }
        });
    }
    constructSendTransactions(transactions, lastValidBlockHeight, parallel = true) {
        return () => __awaiter(this, void 0, void 0, function* () {
            let done = false;
            const isDone = () => done;
            // We separate the block expiry promise so that it can be shared for all the transactions
            const expiry = checkBlockHeightExpiry(this.connection, lastValidBlockHeight, this.commitment, isDone);
            const txs = transactions.map((tx) => tx.serialize());
            const txPromises = txs.map((tx) => __awaiter(this, void 0, void 0, function* () { return confirmOrExpire(this.connection, tx, this.commitment, expiry); }));
            let results = [];
            if (parallel) {
                results = yield Promise.allSettled(txPromises);
            }
            else {
                for (const txPromise of txPromises) {
                    // We might be able to have these transactions individually signed and updated, but not sure
                    // of the implications of the resigning - could be quite annoying from a user perspective
                    // if their wallet forces them to sign for each
                    results.push(yield promiseToSettled(txPromise));
                }
            }
            done = true;
            return results;
        });
    }
    signAndConstructTransaction(txRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            const { transaction, lastValidBlockHeight } = yield this.signTransaction(txRequest);
            return {
                signedTx: transaction,
                execute: () => __awaiter(this, void 0, void 0, function* () { return this.sendTransaction(transaction, lastValidBlockHeight); }),
            };
        });
    }
    signAndConstructTransactions(txRequests, parallel = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const { transactions, lastValidBlockHeight } = yield this.signTransactions(txRequests);
            const execute = this.constructSendTransactions(transactions, lastValidBlockHeight, parallel);
            return { signedTxs: transactions, execute };
        });
    }
}
exports.TransactionProcessor = TransactionProcessor;
function promiseToSettled(promise) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const value = yield promise;
            return {
                status: "fulfilled",
                value: value,
            };
        }
        catch (err) {
            return {
                status: "rejected",
                reason: err,
            };
        }
    });
}
/**
 * Send a tx and confirm that it has reached `commitment` or expiration
 */
function confirmOrExpire(connection, tx, commitment, expiry) {
    return __awaiter(this, void 0, void 0, function* () {
        const txId = yield connection.sendRawTransaction(tx, {
            preflightCommitment: commitment,
        });
        // Inlined to properly clear subscription id if expired before signature
        let subscriptionId;
        // Subscribe to onSignature to detect that the transactionId has been
        // signed with the `commitment` level
        const confirm = new Promise((resolve, reject) => {
            try {
                subscriptionId = connection.onSignature(txId, () => {
                    subscriptionId = undefined;
                    resolve(TransactionStatus.CONFIRMED);
                }, commitment);
            }
            catch (err) {
                reject(err);
            }
        });
        try {
            // Race confirm and expiry to see whether the transaction is confirmed or expires
            const status = yield Promise.race([confirm, expiry]);
            if (status === TransactionStatus.CONFIRMED) {
                return txId;
            }
            else {
                throw new Error("Transaction failed to be confirmed before expiring");
            }
        }
        finally {
            if (subscriptionId) {
                connection.removeSignatureListener(subscriptionId);
            }
        }
    });
}
function checkBlockHeightExpiry(connection, lastValidBlockHeight, commitment, isDone) {
    return __awaiter(this, void 0, void 0, function* () {
        while (!isDone()) {
            let blockHeight = yield connection.getBlockHeight(commitment);
            if (blockHeight > lastValidBlockHeight) {
                break;
            }
            // The more remaining valid blocks, the less frequently we need to check
            yield sleep((lastValidBlockHeight - blockHeight) * 5 + 500);
        }
        return TransactionStatus.EXPIRED;
    });
}
function rewriteTransaction(txRequest, feePayer, blockhash) {
    var _a;
    const signers = (_a = txRequest.signers) !== null && _a !== void 0 ? _a : [];
    const tx = txRequest.transaction;
    tx.feePayer = feePayer;
    tx.recentBlockhash = blockhash;
    signers.filter((s) => s !== undefined).forEach((keypair) => tx.partialSign(keypair));
    return tx;
}
function sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
}
